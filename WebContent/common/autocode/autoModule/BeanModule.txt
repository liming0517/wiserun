/*
 * 创建日期 {CreateDate}
 * Author:{Author}
 * Description:{FunctionCName}({FunctionEName})
 * 窗口 > 首选项 > Java > 代码生成 > 代码和注释
 */
package {PackageName};

import java.sql.SQLException;
import java.util.Vector;

import javax.servlet.http.HttpServletRequest;

import com.pantech.base.common.db.DBSource;
import com.pantech.base.common.exception.WrongSQLException;
import com.pantech.base.common.tools.MyTools;
import com.pantech.base.common.tools.TraceLog;


/**
 * @version 	1.0
 * @author {Author}
 * {FunctionCName}{FunctionEName}
 */
public class {FunctionEName}Bean {

	{loop}private String {QfieldsEName};//{QfieldsCName}
	{loopend}
	private HttpServletRequest request;

	//不带主键的构造函数
	public {FunctionEName}Bean(HttpServletRequest req){
		request=req;
		this.InitialData();
	}
	
	//带主键的构造函数
	public {FunctionEName}Bean(String {KeyEName},HttpServletRequest req) {
		request=req;
		{KeyEName} = MyTools.StrFiltr({KeyEName});
		if ({KeyEName}.equals("")) {
			this.InitialData();
		} else {
			try {
				this.loadData({KeyEName});
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 从表中检索记录放入Bean
	 * @param guid
	 */
	private void loadData(String {KeyEName}) throws SQLException {
		DBSource db = new DBSource(request);
		String sql = "{SelectSql}";
		Vector v = new Vector();
		TraceLog.Trace("sql @ loadData==" + sql);
		v = db.GetContextVector(sql);
		if (v.size() == 0) {
			this.InitialData();
		} else {
			{loop}this.set{QfieldsEName}(v.get({auto}).toString());
			{loopend}
		}
	}

	/**
	 * 初始化Bean
	 */
	private void InitialData() {
		{loop}this.set{QfieldsEName}("");
		{loopend}
	}

	/**
	 * 数据库操作-添加记录
	 */
	public void AddRec() throws WrongSQLException, SQLException {
		DBSource db = new DBSource(request);
		{GuidCondition}
		String sql = "select count(*) from {TableName} where {KeyCName} = '" + MyTools.fixSql(this.get{KeyEName}()) + "'";
		if(!db.getResultFromDB(sql)){
			sql = "{InsertSql}";
			TraceLog.Trace("sql @ AddRec==" + sql);
			db.executeInsertOrUpdate(sql);
		}else{
			throw new SQLException("记录已存在,不能重复添加");
		}
	}

	/**
	 * 数据库操作-修改记录
	 * @param req
	 */
	public void ModRec() throws WrongSQLException, SQLException {
		DBSource db = new DBSource(request);
		{GuidCondition}
		String sql = "select count(*) from {TableName} where {KeyCName} = '" + MyTools.fixSql(this.get{KeyEName}()) + "'";
		if(db.getResultFromDB(sql)){
			sql = "{UpdateSql}";
			TraceLog.Trace("sql @ ModRec==" + sql);
			db.executeInsertOrUpdate(sql);
		}else{
			throw new SQLException("记录不存在,不能修改");
		}
	}

	/**
	 * 数据库操作-删除记录
	 */
	public void RemoveRec() throws WrongSQLException, SQLException {
		DBSource db = new DBSource(request);
		{GuidCondition}
		String sql = "select count(*) from {TableName} where {KeyCName} = '" + MyTools.fixSql(this.get{KeyEName}()) + "'";
		if(db.getResultFromDB(sql)){
			sql = "{DeleteSql}";
			TraceLog.Trace("sql @ DelRec==" + sql);
			db.executeInsertOrUpdate(sql);
		}else{
			throw new SQLException("记录不存在,不能删除");
		}
	}

	{loop}
	/**
	 * 取得{QfieldsCName}
	 * @return
	 */
	public String get{QfieldsEName}() {
		return {QfieldsEName};
	}
	
	/**
	 * 为{QfieldsCName}赋值
	 * @param string
	 */
	public void set{QfieldsEName}(String string) {
		{QfieldsEName} = string;
	}
	{loopend}
}